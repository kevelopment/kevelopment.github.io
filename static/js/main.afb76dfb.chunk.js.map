{"version":3,"sources":["components/ConfigurationBar.jsx","components/Home.jsx","components/TrainingQuestion.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ConfigurationBar","classes","this","props","AppBar","position","Toolbar","Typography","variant","className","title","noWrap","stepIndicator","currentQuestionIndex","maxNumberQuestions","React","Component","withStyles","theme","flexGrow","right","Home","startTraining","startExam","Card","CardHeader","CardContent","Button","color","onClick","TrainingQuestion","state","isWrongAnswer","selectedAnswer","helperText","undefined","handleChange","event","setState","target","value","checkIfCorrect","question","correctAnswer","onNext","showPreviousQuestion","onPrevious","handleClose","prevProps","console","log","index","FormControl","component","formControl","RadioGroup","name","onChange","answers","map","answer","FormControlLabel","control","Radio","label","key","FormHelperText","formHelper","CardActions","leftAlign","disabled","rightAlign","padding","spacing","textAlign","palette","error","main","marginRight","marginLeft","appTheme","createMuiTheme","primary","secondary","App","allQuestions","isLoaded","currentIndex","maxIndex","incrementCurrentIndex","nextIndex","decrementCurrentIndex","previousIndex","Math","min","fetch","then","resp","json","currentQuestion","length","ThemeProvider","Container","Box","display","justifyContent","CircularProgress","size","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.afb76dfb.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar, Typography, withStyles } from \"@material-ui/core\";\n\nclass ConfigurationBar extends React.Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title} noWrap>\n            Doggo-Trainer\n          </Typography>\n          <Typography variant=\"h6\" className={classes.stepIndicator} noWrap>\n            Question{\" \"}\n            {`${this.props.currentQuestionIndex + 1} / ${\n              this.props.maxNumberQuestions + 1\n            }`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nconst styles = (theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n  stepIndicator: {\n    right: 0,\n  },\n});\nexport default withStyles(styles)(ConfigurationBar);\n","import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default class Home extends React.Component {\r\n  startTraining = () => {};\r\n\r\n  startExam = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader title=\"Please select a training mode\" />\r\n        <CardContent>\r\n          <Typography>Training-Mode:</Typography>\r\n          <Typography>\r\n            Practice all Questions in a row with direct evaluation.\r\n          </Typography>\r\n          <Button\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            onClick={this.startExam}\r\n          >\r\n            Training\r\n          </Button>\r\n        </CardContent>\r\n        <CardContent>\r\n          <Typography>Exam-Mode</Typography>\r\n          <Typography>\r\n            Practice a certain number of Questions in a row with evaluation\r\n            after all questions have been answered.\r\n          </Typography>\r\n          <Button\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            onClick={this.startTraining}\r\n          >\r\n            Exam\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Radio,\n  RadioGroup,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nclass TrainingQuestion extends React.Component {\n  state = {\n    isWrongAnswer: false,\n    selectedAnswer: -1,\n    helperText: undefined,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.question !== this.props.question) {\n      console.log(\"update\");\n      this.setState({ selectedAnswer: -1 });\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ selectedAnswer: +event.target.value });\n  };\n\n  checkIfCorrect = () => {\n    let helperText = undefined;\n    if (this.state.selectedAnswer === -1) {\n      helperText = \"Please select an answer.\";\n    } else if (\n      this.state.selectedAnswer !== this.props.question.correctAnswer\n    ) {\n      helperText = \"Wrong answer :( please choose another option.\";\n    }\n    this.setState({ helperText });\n\n    // if helper text was not set: correct answer, go to the next question\n    if (!helperText) {\n      this.props.onNext();\n    }\n  };\n\n  showPreviousQuestion = () => {\n    this.setState({ helperText: undefined });\n    this.props.onPrevious();\n  };\n\n  handleClose = () => {\n    this.setState({ helperText: undefined });\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <>\n        <Card>\n          <CardHeader\n            title={`${this.props.index + 1}. ${this.props.question.question}`}\n          ></CardHeader>\n          <CardContent>\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n              <RadioGroup\n                name=\"quiz-question\"\n                value={this.state.selectedAnswer}\n                onChange={this.handleChange}\n              >\n                {this.props.question.answers.map((answer, index) => (\n                  <FormControlLabel\n                    value={index}\n                    control={<Radio />}\n                    label={answer}\n                    key={`answer-${index}`}\n                  />\n                ))}\n              </RadioGroup>\n            </FormControl>\n            <FormHelperText className={classes.formHelper}>\n              {this.state.helperText}\n            </FormHelperText>\n          </CardContent>\n          <CardActions>\n            <Button\n              className={classes.leftAlign}\n              color=\"primary\"\n              onClick={this.showPreviousQuestion}\n              disabled={this.props.index === 0}\n            >\n              Previous\n            </Button>\n            <Button\n              className={classes.rightAlign}\n              color=\"primary\"\n              onClick={this.checkIfCorrect}\n            >\n              Next\n            </Button>\n          </CardActions>\n        </Card>\n      </>\n    );\n  }\n}\nconst styles = (theme) => ({\n  formControl: { padding: theme.spacing(2) },\n  formHelper: { textAlign: \"center\", color: theme.palette.error.main },\n  leftAlign: { marginRight: \"auto\" },\n  rightAlign: { marginLeft: \"auto\" },\n});\nexport default withStyles(styles)(TrainingQuestion);\n","import {\n  Box,\n  CircularProgress,\n  Container,\n  createMuiTheme,\n  ThemeProvider,\n  Toolbar,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./App.css\";\nimport ConfigurationBar from \"./components/ConfigurationBar\";\nimport Home from \"./components/Home\";\nimport TrainingQuestion from \"./components/TrainingQuestion\";\n\nconst appTheme = createMuiTheme({\n  palette: {\n    // type: \"dark\",\n    primary: {\n      main: \"#005400\",\n    },\n    secondary: {\n      main: \"#f08f27\",\n    },\n  },\n});\n\nexport class App extends React.Component {\n  state = {\n    allQuestions: [],\n    isLoaded: false,\n    currentIndex: 0,\n    maxIndex: 0,\n  };\n\n  async componentDidMount() {\n    const allQuestions = await fetch(\"data.json\").then((resp) => resp.json());\n    this.setState({\n      allQuestions,\n      isLoaded: true,\n      currentQuestion: allQuestions[0],\n      maxIndex: allQuestions.length - 1,\n    });\n  }\n\n  incrementCurrentIndex = () => {\n    let { currentIndex } = this.state;\n    let nextIndex = ++currentIndex;\n    if (nextIndex > this.state.maxIndex) {\n      nextIndex = 0;\n    }\n\n    this.setState({ currentIndex: nextIndex });\n  };\n\n  decrementCurrentIndex = () => {\n    let { currentIndex } = this.state;\n    const previousIndex = Math.min(--currentIndex, 0);\n    this.setState({ currentIndex: previousIndex });\n  };\n\n  render() {\n    return (\n      <ThemeProvider theme={appTheme}>\n        <ConfigurationBar\n          currentQuestionIndex={this.state.currentIndex}\n          maxNumberQuestions={this.state.maxIndex}\n        />\n        <Toolbar />\n        <Container>\n          <Home />\n          {this.state.isLoaded ? (\n            <TrainingQuestion\n              question={this.state.allQuestions[this.state.currentIndex]}\n              onNext={this.incrementCurrentIndex}\n              onPrevious={this.decrementCurrentIndex}\n              index={this.state.currentIndex}\n            />\n          ) : (\n            <Box display=\"flex\" justifyContent=\"center\">\n              <CircularProgress size={\"10vh\"} height={\"50vh\"} />\n            </Box>\n          )}\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}